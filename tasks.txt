# TASK1 START mysql 설치
docker로mysql 최신 버전 pull받아서 띄워줘.  포트는 기본포트인 3306으로 해줘. 포트가 안되면 3307, 3308 등으로 해도 괜찮아
그리고 접속이 가능하도록 id: test1, pass: test1 으로 해서 접속 가능하게 세팅해주고, test_admin 이라는 db 하나 만들어줘
그리고 현재 머신의 외부에서도 접속이 가능하도록 포트 오픈 해줘
# TASK1 END

# TASK2 START valkey 설치
docker로 valkey  최신버전 pull 받아서 띄워줘. 포트는 6379 기본 포트, 안되면 6380, 6381도 괜찮아
현재 머신의 외부에서도 접속이 가능하도록 포트 오픈 해줘
# TASK2 END

# TASK3 START mongodb 설치
docker로 mongodb 최신버전 pull 받아서 띄워주고 포트는 27017로 되면 좋겠어 안되면 27018, 27019도 괜찮아
현재 머신의 외부에서도 접속이 가능하도록 포트 오픈 해줘
# TASK3 END

# TASK4 START admin_auth 테이블 생성
mysql test_admin db에 admin_auth 테이블생성해줘 
id int AUTO INCREMENT
group_id int DEFAULT -1
user_name varchar(64) 
descrption varchar(64)
password varchar(64)
create_time TIMESTAMP DEFAULT 자동으로생성된시간
last_ip varchar(15)
last_login int DEFAULT 0

id는 primary key
인덱스는 user_name에 걸어줘 
# TASK4 END

# TASK5 START /admin_list 페이지 작성
운영툴에 /admin_list 페이지를 추가 하는데 admin_auth 테이블을 읽어서 10개 행씩 보여주는 테이블로 작성해줘
page 처리가 될 수있도록 테이블 하단에 pager 처리 해주고, 생성 버튼을 그 옆에 만들고, 누르면 /register 페이지로 이동하도록 처리해
테이블 형태는 id, group_id, user_name, description, last_login, last_ip, "작업"  를 보여줄 수 있게 구성해줘
last_login은 timestamp를 기록하는 int 형태니까 이걸 YYYY-MM-DD HH-mm-SS 형태로 보일수 있도록 해주고
"작업" 열에는 삭제 버튼이 각각 붙도록 해주고 그 버튼을 눌렀을때 alert("<user_name>삭제"); 를 호출하도록 해줘. <user_name>은 각 행의user_name이 들어가도록 하고
테이블 상단에는 "어드민 관리 페이지" 라고 h4로 표시해줘 

그리고 동작을 확인할 수 있도록 admin_auth 테이블에 임의로 12개 행의 데이터를 만들어서 넣어줘
# TASK5 END

# TASK6 START sql 문 저장
admin_auth 테이블 생성 문을 src/sql/test_admin.sql 에 추가해줘. 기존에 생성된 테이블이 있으면 지우도록 하는 구문을 추가해주면 좋겠어
# TASK6 END

# TASK7 START /register 페이지의 등록처리
/register 페이지에서 "확인"버튼을 "등록"버튼으로 바꿔주고, 등록버튼을 눌렀을때 /actions/register 페이지에 데이터를 보내서 admin_auth table에 저장하도록 
코드 작성해줘

등록버튼을 눌렀을때 입력한 내용을 confirm 창에 보여주고, "이대로 등록하시겠습니까?" 의 메시지와 함께 확인을 눌렀을때 등록하게 해줘
그리고 "이메일" 입력창을 "유저 이름" 입력창으로 바꿔주고, 유저이름에 4자 이하의 값이 등록되었을때 입력창 옆에 "너무 짧습니다"가 표시되도록 처리해줘

db의 group_id = -1, description = "신규유저" 로 들어가도록 해주고, last_ip는 브라우저의 client ip를 얻어서 입력해주면 좋겠어
# TASK7 END

# TASK8 START 페이지 렌딩 수정
/actions/register 가 호출되서 정상적으로 값이 입력되면 /admin_list 페이지에서 등록사항을 볼 수 있도록 수정해줘
그리고 /admin_list 에서 표시되는 정보는 create_time 기준으로 내림차순 정렬시켜주고, 필요하면 INDEX를 create_time에 추가하고, ./src/sqls/test_admin.sql 의
내용도 수정해줘
# TASK8 END

# TASK9 START 오류 수정
/register 에서 값을 넣고 실행을 해보았는데 alert "등록 실패: Method Not Allowed" 가 뜨면서 더이상 실행이 안되는데 해당 코드를 작동하도록 수정해줘
# TASK9 END

# TASK10 START mysql id, pass 처리
./src/request/register_action_hanlder.go 에 보면 sql.Open에 직접 id, pass 를 넣는 방식으로 되어있는데 
config.yaml에 
MYSQL:
  ID: "test1"
  PASS: "test1"
을 추가해주고, 이걸 읽어서 sql.Open을 수행하는 방식으로 변경해줘.

그리고 sql문을 자주 쓰게 될거 같으니 ./src/utils/mysql_util.go 를 만들어서 
mysql을 사용할때 자주쓰는 헬퍼(open, row 처리 등)를 만들어서 넣고, 그걸 이용해서 처리하도록 변경해줘
# TASK10 END

# TASK11 START 작업오류 수정
작업해서 띄워준 서버의 /admin_list에 접속하였더니 Error fetching admin count 이런 오류가 발생했어.
정상 작동하도록 수정하고 테스트할 수 있도록 어플리케이션 재시작 시켜줘
# TASK11 END

# TASK12 START 코드 정리
main.go 에 보면 e.POST("/actions/register", request.RegisterActionHandler) 가 router에 등록되지 않고 
따로 떨어져 있는데 이부분을 router에서 처리되도록 수정해줘
# TASK12 END
